---
layout: post
title: Android中的MVP
date: 2016-02-16 15:32:24.000000000 +09:00
---
###### 为什么需要MVP 
1. 一般的安卓应用为View-Model结构，由于UI需要调整和修改现在更多的是和view打交道，而不是和业务逻辑，用常规的写法会发现都是所有的事物都被连接到了一起，复杂的任务被细小分配就很容易解决，越小的东西 BUG越少，也越好测试。在MVP模式下view将变得简单，所以即使他请求数据不需要回到函数，view逻辑变得十分直接。
2. 后台任务，当你编写Activity，Fragment，自定义view时，你会把所有与后台相关的方法都写在静态类活着外部类中，这样，你的Task不再和Activity联系在一起，就不会导致内存泄漏，也不依赖activity的重建了。
[官方提供了Demo](https://github.com/googlesamples/android-architecture).
优点就是
+ 降低耦合度，实现了Model和view的分离，可以修改view不影响model
+ 模块指责分配明显，层次清晰
+ 隐藏数据，能够对数据进行缓存处理
+ 业务逻辑清晰，view就是负责页面更新相关的操作，presenter就是负责逻辑相关的操作，Model就是负责处理数据相关的操作
+ 利于单元测试 可以方便测试数据库 对数据库相关接口进行测试
+ view进行组件化 view不依赖于model view从业务场景中脱离出来，对业务完全无知，只需要提供一系列定义好的接口给上层进行调用，高度复用。
###### 缺点
+ presenter中除了应用逻辑外还有大量的view——model，Model-View的手动同步逻辑，造成presenter比较笨重，维护起来比较臃肿。
+ 由于视图渲染放在presenter中所以视图和Presenter交互过于频繁
+ 如果Presenter过多地渲染了视图，往往会使得它与特定的视图的联系过于紧密。一旦视图需要变更，那么Presenter也需要变更了。
在MVP模式中包含的四个要素
1. view负责绘制UI元素，与用户进行交互（Activity）
2. view interface需要view实现的接口，View通过viewinterface与Presenter进行交互，降低耦合，方便单元测试
3. Model负责存储，检索，操作数据
4. Presenter 作为View 与Model交互中间纽带，处理与用户交互的负责逻辑
