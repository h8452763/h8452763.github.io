---
layout: post
title: 单例模式
date: 2016-02-16 15:32:24.000000000 +09:00
---
###### 单例模式
保证一个类只有一个实例，并提供一个访问它的全局访问点 就是单例模式
有懒汉式和饿汉式
饿汉式 `private static SingleTon UniqueInstance=new SingleTon()`
懒汉式 `private static SingleTon UniqueInstance=null`当需要的时候在加载 但是有线程安全的问题
范围 java里面的单例是一个虚拟机的范围，因为装载类的功能是虚拟机的，所以一个虚拟机在通过自己的classLoader装载饿汉式实现的单例类就会创建一个类的实例
`饿汉式单例有延迟加载的效果`
懒汉式的线程安全问题
双重加锁解决
双重加锁机制实现使用一个关键字是volatile 意思是被volatile修饰的变量，将不会被本地线程缓存，直接操作共享内存，从而确保多个线程处理该变量
{% highlight ruby %}
public class Singleton {
    private volatile static SingleTon instance=null;
    private SingleTon(){}

    public static SingleTon getInstance() {
        if(instance==null){
        sychronized(Singleton.class){
        instance=newSingleTon();
        }
        }
        return instance；
    }
}
{% endhighlight %}

还有一种就是静态内部类不会引用外部变量 只有被调用的时候才会绑定 也达到了延迟加载的目的 静态初始化保证JVM的安全
{% highlight ruby %}
public class Singleton {

	/**
	 * 类级的内部类，也就是静态类的成员式内部类，该内部类的实例与外部类的实例
	 * 没有绑定关系，而且只有被调用时才会装载，从而实现了延迟加载
	 * @author dream
	 *
	 */
	private static class SingletonHolder{
		/**
		 * 静态初始化器，由JVM来保证线程安全
		 */
		private static final Singleton instance = new Singleton();
	}
	
	/**
	 * 私有化构造方法
	 */
	private Singleton(){
		
	}
	
	public static Singleton getInstance(){
		return SingletonHolder.instance;
	}
}
{% endhighlight %}
#####  最后一种方法就是 高效java第二版里面的单元素枚举类型 是single的最佳方法
{% highlight ruby %}
/**
 * 使用枚举来实现单例模式的示例
 * @author dream
 *
 */
public enum Singleton {

	/**
	 * 定义一个枚举的元素，它就代表了Singleton的一个实例
	 */
	uniqueInstance;
	
	/**
	 * 示意方法，单例可以有自己的操作
	 */
	public void singletonOperation(){
		//功能树立
	}
}
{% endhighlight %}
使用枚举的特征就是 自由序列化，线程安全，保证单例 但是enum是有class实现的，继承了Enum类实现的，enum不能够作为子类是继承其它类但是可以实现接口， enum不能被继承，反编译发现该类是final的。
反编译后就会发现，使用枚举其实和使用静态类内部加载方法原理类似
对于线程安全方面，类似于普通的饿汉模式，通过在第一次调用时的静态初始化创建的对象是线程安全的。

因此，选择枚举作为Singleton的实现方式，相对于其他方式尤其是类似的饿汉模式主要有以下优点：

1. 代码简单

2. 自由序列化

至于lazy-loading，考虑到一般情况不存在调用单例类又不需要实例化单例的情况，所以即便不能做到很好的lazy-loading，也并不是大问题。换言之，除了枚举这种方案，饿汉模式也在单例设计中广泛的被应用。

